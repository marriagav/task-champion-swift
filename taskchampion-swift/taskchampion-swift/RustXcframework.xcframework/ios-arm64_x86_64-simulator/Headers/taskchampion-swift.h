// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
typedef struct Replica Replica;
void __swift_bridge__$Replica$_free(void* self);

void* __swift_bridge__$Vec_Replica$new(void);
void __swift_bridge__$Vec_Replica$drop(void* vec_ptr);
void __swift_bridge__$Vec_Replica$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Replica$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Replica$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Replica$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Replica$len(void* vec_ptr);
void* __swift_bridge__$Vec_Replica$as_ptr(void* vec_ptr);

typedef struct Operation Operation;
void __swift_bridge__$Operation$_free(void* self);

void* __swift_bridge__$Vec_Operation$new(void);
void __swift_bridge__$Vec_Operation$drop(void* vec_ptr);
void __swift_bridge__$Vec_Operation$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Operation$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Operation$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Operation$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Operation$len(void* vec_ptr);
void* __swift_bridge__$Vec_Operation$as_ptr(void* vec_ptr);

typedef struct TaskData TaskData;
void __swift_bridge__$TaskData$_free(void* self);

void* __swift_bridge__$Vec_TaskData$new(void);
void __swift_bridge__$Vec_TaskData$drop(void* vec_ptr);
void __swift_bridge__$Vec_TaskData$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_TaskData$pop(void* vec_ptr);
void* __swift_bridge__$Vec_TaskData$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_TaskData$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_TaskData$len(void* vec_ptr);
void* __swift_bridge__$Vec_TaskData$as_ptr(void* vec_ptr);

typedef struct Task Task;
void __swift_bridge__$Task$_free(void* self);

void* __swift_bridge__$Vec_Task$new(void);
void __swift_bridge__$Vec_Task$drop(void* vec_ptr);
void __swift_bridge__$Vec_Task$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Task$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Task$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Task$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Task$len(void* vec_ptr);
void* __swift_bridge__$Vec_Task$as_ptr(void* vec_ptr);

typedef struct Annotation Annotation;
void __swift_bridge__$Annotation$_free(void* self);

void* __swift_bridge__$Vec_Annotation$new(void);
void __swift_bridge__$Vec_Annotation$drop(void* vec_ptr);
void __swift_bridge__$Vec_Annotation$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Annotation$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Annotation$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Annotation$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Annotation$len(void* vec_ptr);
void* __swift_bridge__$Vec_Annotation$as_ptr(void* vec_ptr);

typedef struct Status Status;
void __swift_bridge__$Status$_free(void* self);

void* __swift_bridge__$Vec_Status$new(void);
void __swift_bridge__$Vec_Status$drop(void* vec_ptr);
void __swift_bridge__$Vec_Status$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Status$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Status$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Status$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Status$len(void* vec_ptr);
void* __swift_bridge__$Vec_Status$as_ptr(void* vec_ptr);

typedef struct Uuid Uuid;
void __swift_bridge__$Uuid$_free(void* self);

void* __swift_bridge__$Vec_Uuid$new(void);
void __swift_bridge__$Vec_Uuid$drop(void* vec_ptr);
void __swift_bridge__$Vec_Uuid$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Uuid$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Uuid$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Uuid$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Uuid$len(void* vec_ptr);
void* __swift_bridge__$Vec_Uuid$as_ptr(void* vec_ptr);

void* __swift_bridge__$new_replica_in_memory(void);
void* __swift_bridge__$new_replica_on_disk(void* taskdb_dir, bool create_if_missing, bool read_write);
void* __swift_bridge__$Replica$all_task_data(void* self);
void* __swift_bridge__$Replica$all_tasks(void* self);
void* __swift_bridge__$Replica$get_task(void* self, void* uuid);
void* __swift_bridge__$Replica$pending_tasks(void* self);
void __swift_bridge__$Replica$commit_operations(void* self, void* ops);
bool __swift_bridge__$Replica$sync_local_server(void* self, void* server_dir);
bool __swift_bridge__$Replica$sync_no_server(void* self);
bool __swift_bridge__$Replica$sync_remote_server(void* self, void* url, void* client_id, void* encryption_secret);
bool __swift_bridge__$Replica$sync_gcp(void* self, void* bucket, void* credential_path, void* encryption_secret);
bool __swift_bridge__$Replica$sync_aws(void* self, void* region, void* bucket, void* access_key_id, void* secret_access_key, void* encryption_secret);
void* __swift_bridge__$Replica$create_task(void* self, void* uuid, void* description, void* due, void* priority, void* project);
void* __swift_bridge__$Replica$update_task(void* self, void* uuid, void* description, void* due, void* priority, void* project, void* status, void* annotations);
void* __swift_bridge__$new_operations(void);
void* __swift_bridge__$TaskData$get_uuid(void* self);
void* __swift_bridge__$Task$get_uuid(void* self);
void* __swift_bridge__$Task$get_description(void* self);
void* __swift_bridge__$Task$get_status(void* self);
void* __swift_bridge__$Task$get_due(void* self);
void* __swift_bridge__$Task$get_priority(void* self);
void* __swift_bridge__$Task$get_annotations(void* self);
void* __swift_bridge__$Task$get_project(void* self);
void* __swift_bridge__$Annotation$get_description(void* self);
void* __swift_bridge__$create_annotation(void* description, void* entry);
void* __swift_bridge__$Status$get_value(void* self);
void* __swift_bridge__$uuid_v4(void);
void* __swift_bridge__$Uuid$to_string(void* self);


